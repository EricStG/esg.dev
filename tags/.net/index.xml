<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>.net on ESG's</title><link>https://esg.dev/tags/.net/</link><description>Recent content in .net on ESG's</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 21 Feb 2021 19:01:55 -0500</lastBuildDate><atom:link href="https://esg.dev/tags/.net/index.xml" rel="self" type="application/rss+xml"/><item><title>Editorconfig integration with Visual Studio and .NET</title><link>https://esg.dev/posts/editorconfig-with-visual-studio/</link><pubDate>Sun, 21 Feb 2021 19:01:55 -0500</pubDate><guid>https://esg.dev/posts/editorconfig-with-visual-studio/</guid><description>&lt;p>If you are not familiar with &lt;a href="https://editorconfig.org/">EditorConfig&lt;/a> files, you&amp;rsquo;re missing out&lt;/p>
&lt;p>Today, I&amp;rsquo;ll walk you through some of the basic features, as well as some extensions to the format supported by Visual Studio and the .NET tools.&lt;/p>
&lt;h1 id="the-basics">The basics&lt;/h1>
&lt;p>Editorconfig is a way to define some coding styles by adding files called &lt;code>.editorconfig&lt;/code> to your code repository.
There&amp;rsquo;s pretty wide support from editors out there that supports it either natively, like &lt;a href="https://docs.microsoft.com/en-us/visualstudio/ide/create-portable-custom-editor-options?view=vs-2019">Visual Studio&lt;/a>, or through add-ons, like &lt;a href="https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig">Visual Studio Code&lt;/a>.&lt;/p>
&lt;h2 id="hierarchy">Hierarchy&lt;/h2>
&lt;p>Editorconfig us a hierarchical configuration for code style, meaning that when a code file is open, it will apply every settings from &lt;code>.editorconfig&lt;/code> files it finds, from the file&amp;rsquo;s folder, up to the root of the file system.&lt;/p>
&lt;p>The closer to the code file the config is, the higher the priority.&lt;/p>
&lt;p>You can make prevent scanning parent directories by specifying &lt;code>root = true&lt;/code> in your &lt;code>.editorconfig file&lt;/code>.&lt;/p>
&lt;h2 id="syntax">Syntax&lt;/h2>
&lt;p>Editorconfig files are split into sections. Each section starts with a file selector, as determined by square brackets &lt;code>[]&lt;/code>.&lt;/p>
&lt;p>This selector can apply to every file like &lt;code>[*]&lt;/code>, a simple wildcard like &lt;code>[*.json]&lt;/code>, or a list of extensions like &lt;code>[*.{cs, vb}]&lt;/code>&lt;/p>
&lt;p>Consider the following example:&lt;/p>
&lt;pre>&lt;code>root = true
[*]
indent_style = space
[*.{cs,vb}]
indent_size = 4
insert_final_newline = true
charset = utf-8-bom
&lt;/code>&lt;/pre>&lt;p>First, we have &lt;code>root = true&lt;/code>, meaning that we won&amp;rsquo;t be scanning any parent folders for more &lt;code>.editorconfig&lt;/code> files.&lt;/p>
&lt;p>Then, we have a &lt;code>[*]&lt;/code> block that applies to every file, saying we will be using &lt;a href="https://www.youtube.com/watch?v=SsoOG6ZeyUI">space&lt;/a> to indent.&lt;/p>
&lt;p>And last, we have the &lt;code>[*.{cs,vb}]&lt;/code> block that will apply to all files with a &lt;code>.cs&lt;/code> or &lt;code>.vb&lt;/code> extension.
Those files will have a indent of 4 (using spaces since the content of the &lt;code>[*]&lt;/code> block is still being applied), we want to ensure the presence of an empty line at the end of each file, and we are using the UTF-8 character set with the byte order mark.&lt;/p>
&lt;p>Tip: If using git, you will want to make sure that your &lt;a href="https://git-scm.com/docs/gitattributes">gitattribute&lt;/a> don&amp;rsquo;t conflict with your &lt;code>.editorconfig&lt;/code> settings, otherwise your editor might trying to undo what git is doing on checkout, causing a bunch of changes that aren&amp;rsquo;t wanted.&lt;/p>
&lt;h2 id="net-specific-extensions">.NET specific extensions&lt;/h2>
&lt;p>With the Roslyn compiler, there&amp;rsquo;s a number of extensions to the Editorconfig format that allows to configure code analysis.&lt;/p>
&lt;p>For example, you can use Editorconfig to tell whether using clauses should be sorted with the &lt;code>System&lt;/code> namespace first&lt;/p>
&lt;pre>&lt;code>[*.{cs,vb}]
dotnet_sort_system_directives_first = true
&lt;/code>&lt;/pre>&lt;p>You want contributors to use &lt;code>var&lt;/code> for C# built-in types? Done!&lt;/p>
&lt;pre>&lt;code>csharp_style_var_for_built_in_types = true
&lt;/code>&lt;/pre>&lt;p>You can even make it an error:&lt;/p>
&lt;pre>&lt;code>csharp_style_var_for_built_in_types = true:error
&lt;/code>&lt;/pre>&lt;p>You can also configure casing, as well as prefix and suffix. This will give a warning for any fields that are not camel case, and not prefixed with an underscore &lt;code>_&lt;/code>.&lt;/p>
&lt;pre>&lt;code>dotnet_naming_rule.instance_fields_should_be_camel_case.severity = warning
dotnet_naming_rule.instance_fields_should_be_camel_case.symbols = instance_fields
dotnet_naming_rule.instance_fields_should_be_camel_case.style = instance_field_style
dotnet_naming_symbols.instance_fields.applicable_kinds = field
dotnet_naming_style.instance_field_style.capitalization = camel_case
dotnet_naming_style.instance_field_style.required_prefix = _
&lt;/code>&lt;/pre>&lt;p>See the &lt;a href="https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/overview">official documentation&lt;/a> for more options. The [Roslyn .editorconfig] also has number of good examples.&lt;/p>
&lt;h2 id="configuring-code-analysis">Configuring code analysis&lt;/h2>
&lt;p>If you&amp;rsquo;re familiar with Visual Studio and Code Analysis, you might have had to configure it through xml via &lt;a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/using-rule-sets-to-group-code-analysis-rules?view=vs-2019">.ruleset&lt;/a> files.&lt;/p>
&lt;p>That&amp;rsquo;s no longer necessary, as it can be done through Editorconfig!&lt;/p>
&lt;p>All you need is a line that reads &lt;code>dotnet_diagnostic.&amp;lt;Code&amp;gt;.severity = &amp;lt;Severity&amp;gt;&lt;/code>, such as:&lt;/p>
&lt;pre>&lt;code>[*.{cs,vb}]
dotnet_diagnostic.RCS1007.severity = error
&lt;/code>&lt;/pre>&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>Whenever you a small or a large team, having common code styles in your project can help minimize head scratching when reading a teammate&amp;rsquo;s code (or let&amp;rsquo;s be honest, your past self&amp;rsquo;s code as well).
With Editorconfig, you have a standard way that&amp;rsquo;s not tied to specific technologies to help make those styling standard happens.&lt;/p>
&lt;p>What coding styles do you apply to your project?&lt;/p></description><category>visual studio</category><category>.net</category></item><item><title>Using HttpClient with System.Text.Json</title><link>https://esg.dev/posts/httpclient-with-system-text-json/</link><pubDate>Fri, 22 Jan 2021 17:01:55 -0500</pubDate><guid>https://esg.dev/posts/httpclient-with-system-text-json/</guid><description>&lt;p>When working with JSON and &lt;code>HttpClient&lt;/code> in the .NET Framework, it was pretty common to add a reference to &lt;a href="https://www.nuget.org/packages/Microsoft.AspNet.WebApi.Client/">Microsoft.AspNet.WebApi.Client&lt;/a>, which added a number of extension methods to &lt;code>HttpClient&lt;/code> and &lt;code>HttpResponseMessage&lt;/code> that made it simpler to send and receive JSON documents.&lt;/p>
&lt;p>That package still work with .NET Core, but it has a dependency on the &lt;a href="https://www.nuget.org/packages/Newtonsoft.Json/">Newtonsoft.Json&lt;/a>. Since .NET Core 3+ comes with &lt;a href="https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-how-to?pivots=dotnet-5-0">System.Text.Json&lt;/a>, a more async friendly JSON parser, it might be worth making the switch, espcially in newer projects.&lt;/p>
&lt;p>Conveniently, there&amp;rsquo;s also a package called &lt;a href="https://www.nuget.org/packages/System.Net.Http.Json/">System.Net.Http.Json&lt;/a> that includes extension methods to make your serialization and deserializion easier.&lt;/p>
&lt;h1 id="microsoftaspnetwebapiclient">Microsoft.AspNet.WebApi.Client&lt;/h1>
&lt;p>This section will show a few calls made with &lt;code>Microsoft.AspNet.WebApi.Client&lt;/code>.&lt;/p>
&lt;p>The assumption is that you have an &lt;code>HttpClient&lt;/code> already instanciated with the name &lt;code>client&lt;/code>, a request model called &lt;code>RequestModel&lt;/code>, and a response model called &lt;code>ResponseModel&lt;/code>.&lt;/p>
&lt;h2 id="a-basic-get">A basic GET&lt;/h2>
&lt;p>First, we get a &lt;code>HttpResponseMessage&lt;/code> from the client by making a request.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">HttpResponseMessage response = &lt;span style="color:#66d9ef">await&lt;/span> client.GetAsync(&lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then, we using the generic verion of the &lt;code>ReadAsAsync&amp;lt;T&amp;gt;&lt;/code> extension method to read and deserialize the JSON document into our object.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">Task&amp;lt;ResponseModel&amp;gt; responseModel = &lt;span style="color:#66d9ef">await&lt;/span> response.Content.ReadAsAsync&amp;lt;ResponseModel&amp;gt;();
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="a-post-with-a-request-document">A POST with a request document&lt;/h2>
&lt;p>Sending a document is also pretty straightforward.&lt;/p>
&lt;p>First, we initialize our request model.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">RequestModel requestModel = &lt;span style="color:#66d9ef">new&lt;/span> RequestModel();
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then, we make our request, including our model that will get serialized through the &lt;code>PostAsJsonAsync&lt;/code> extension method.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">HttpResponseMessage response = &lt;span style="color:#66d9ef">await&lt;/span> client.PostAsJsonAsync(&lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>, requestModel);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally, we read the response model, just like we did for the GET.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">ResponseModel responseModel = &lt;span style="color:#66d9ef">await&lt;/span> response.Content.ReadAsAsync&amp;lt;ResponseModel&amp;gt;();
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="systemnethttpjson">System.Net.Http.Json&lt;/h1>
&lt;p>Here, we&amp;rsquo;ll be doing the same exact thing, but using the extension methods in &lt;code>System.Net.Http.Json&lt;/code> instead.&lt;/p>
&lt;h2 id="a-basic-get-1">A basic GET&lt;/h2>
&lt;p>Again, we get a &lt;code>HttpResponseMessage&lt;/code> from the client by making a request. This is the same as for &lt;code>Microsoft.AspNet.WebApi.Client&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">HttpResponseMessage response = &lt;span style="color:#66d9ef">await&lt;/span> client.GetAsync(&lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then, we using the generic verion of the &lt;code>ReadFromJsonAsync&amp;lt;T&amp;gt;&lt;/code> extension method to read and serialize the JSON document into our object.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">ResponseModel responseModel = &lt;span style="color:#66d9ef">await&lt;/span> response.Content.ReadFromJsonAsync&amp;lt;ResponseModel&amp;gt;();
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that if you don&amp;rsquo;t need to do any processing on the &lt;code>HttpResponseMessage&lt;/code>, there&amp;rsquo;s also a convenience method called &lt;code>GetFromJsonAsync&lt;/code> so you can skip that step entirely.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">ResponseModel responseModel = &lt;span style="color:#66d9ef">await&lt;/span> client.GetFromJsonAsync&amp;lt;ResponseModel&amp;gt;(&lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="a-post-with-a-request-document-1">A POST with a request document&lt;/h2>
&lt;p>Sending a document is also pretty straightforward.&lt;/p>
&lt;p>First, we initialize our request model.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">RequestModel requestModel = &lt;span style="color:#66d9ef">new&lt;/span> RequestModel();
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then, we make our request, including our model that will get serialized through the &lt;code>PostAsJsonAsync&lt;/code> extension method, which conveniently has the same name as the extension method from &lt;code>Microsoft.AspNet.WebApi.Client&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">HttpResponseMessage response = &lt;span style="color:#66d9ef">await&lt;/span> client.PostAsJsonAsync(&lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>, requestModel);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally, we read the response model, just like we did for the GET.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">ResponseModel responseModel = &lt;span style="color:#66d9ef">await&lt;/span> response.Content.ReadFromJsonAsync&amp;lt;ResponseModel&amp;gt;();
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="final-notes">Final notes&lt;/h1>
&lt;p>While serializing and deserializing documents with the &lt;code>HttpClient&lt;/code> isn&amp;rsquo;t particularly challenging, it does lead to a fair amount of repetition, so using these extension methods (or rolling your own!) should make your code look a lot leaner.&lt;/p></description><category>.net</category></item><item><title>Serilog Do's and Don'ts</title><link>https://esg.dev/posts/serilog-dos-and-donts/</link><pubDate>Sun, 12 Jul 2020 18:08:20 -0400</pubDate><guid>https://esg.dev/posts/serilog-dos-and-donts/</guid><description>&lt;p>&lt;a href="https://serilog.net/">Serilog&lt;/a> is a structured logger for &lt;a href="https://dotnet.microsoft.com/">.NET&lt;/a>, and as such, for folks who are used to traditional console loggers, requires the developer to think about their logs a little more than normal.&lt;/p>
&lt;p>This post is not meant to be a how to, but rather a non-comprehensive list of mistakes I&amp;rsquo;ve seen over time.&lt;/p>
&lt;h2 id="templating">Templating&lt;/h2>
&lt;p>One thing to keep in mind is that when writing an event to the log, you are not passing a message, but a &lt;em>template&lt;/em>. The tags you pass within curly branches do have meaning, and will be used to add data the event. It is therefore important to not format the message before passing logging it.&lt;/p>
&lt;p>Consider a logger with a basic console sink&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#66d9ef">var&lt;/span> textLogger = Log.Logger = &lt;span style="color:#66d9ef">new&lt;/span> LoggerConfiguration()
.WriteTo.Console()
.CreateLogger();
&lt;/code>&lt;/pre>&lt;/div>&lt;p>With two very basic statements&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">textLogger.Information(&lt;span style="color:#e6db74">$&amp;#34;Hello {world}&amp;#34;&lt;/span>);
textLogger.Information(&lt;span style="color:#e6db74">&amp;#34;Hello {value}&amp;#34;&lt;/span>, world);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Will output:&lt;/p>
&lt;pre>&lt;code>[18:19:18 INF] Hello World
[18:19:18 INF] Hello World
&lt;/code>&lt;/pre>&lt;p>Can you spot the difference? Spoiler: There isn&amp;rsquo;t one! So what&amp;rsquo;s the problem then?&lt;/p>
&lt;p>Well, let&amp;rsquo;s use the &lt;a href="https://github.com/serilog/serilog-formatting-compact">JSOM Formatter&lt;/a> instead:&lt;/p>
&lt;p>(note: I&amp;rsquo;m using the &lt;a href="https://github.com/serilog/serilog-formatting-compact#rendered-events">Rendered&lt;/a> formatter so we can see the rendered template within each event)&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#66d9ef">var&lt;/span> jsonLogger = Log.Logger = &lt;span style="color:#66d9ef">new&lt;/span> LoggerConfiguration()
.WriteTo.Console(&lt;span style="color:#66d9ef">new&lt;/span> RenderedCompactJsonFormatter())
.CreateLogger();
&lt;/code>&lt;/pre>&lt;/div>&lt;p>With the same statements&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">jsonLogger.Information(&lt;span style="color:#e6db74">$&amp;#34;Hello {world}&amp;#34;&lt;/span>);
jsonLogger.Information(&lt;span style="color:#e6db74">&amp;#34;Hello {value}&amp;#34;&lt;/span>, world);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Will give us:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;@t&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2020-07-12T22:26:19.6616913Z&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;@m&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Hello World&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;@i&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;00ba5a14&amp;#34;&lt;/span>
}
{
&lt;span style="color:#f92672">&amp;#34;@t&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2020-07-12T22:26:19.6659300Z&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;@m&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Hello \&amp;#34;World\&amp;#34;&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;@i&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;40c34e37&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;value&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;World&amp;#34;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>When using &lt;code>textLogger.Information(&amp;quot;Hello {value}&amp;quot;, world)&lt;/code>, there is now a field called &lt;code>value&lt;/code> with the argument we passed to the logging statements.
In addition, the &lt;code>@i&lt;/code> field will have the same value every time this statement will run, so you have a fixed item to search for if you want to search for every value being logged by this particular statement.&lt;/p>
&lt;h3 id="tldr">TLDR&lt;/h3>
&lt;p>&lt;strong>DON&amp;rsquo;T&lt;/strong> format messages before passing them to the logger&lt;/p>
&lt;h2 id="destructuring">Destructuring&lt;/h2>
&lt;p>One of the benefit of having a structured logger versus a flat one, is, well, &lt;em>structure&lt;/em>. You are not limited to logging simple values, you can include entire object graphs. This process is called &lt;em>Destructuring&lt;/em>&lt;/p>
&lt;p>Let&amp;rsquo;s consider the following classes&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">TestInnerClass&lt;/span>
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> SomeOtherProperty { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">TestClass&lt;/span>
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> SomeProperty { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
&lt;span style="color:#66d9ef">public&lt;/span> TestInnerClass SomeInnerClass { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let&amp;rsquo;s initialize an instance&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#66d9ef">var&lt;/span> obj = &lt;span style="color:#66d9ef">new&lt;/span> TestClass
{
SomeInnerClass = &lt;span style="color:#66d9ef">new&lt;/span> TestInnerClass
{
SomeOtherProperty = &lt;span style="color:#e6db74">&amp;#34;I am a property within a child&amp;#34;&lt;/span>
},
SomeProperty = &lt;span style="color:#e6db74">&amp;#34;I am a property at the root level&amp;#34;&lt;/span>
};
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And let&amp;rsquo;s include it a logging statement&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">jsonLogger.Information(&lt;span style="color:#e6db74">&amp;#34;Useful log for object {object}&amp;#34;&lt;/span>, obj);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will output&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;@t&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2020-07-12T22:43:28.1191964Z&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;@m&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Useful log for object \&amp;#34;SerilogTest.TestClass\&amp;#34;&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;@i&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;146d94ee&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;object&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;SerilogTest.TestClass&amp;#34;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>What? &lt;code>SerilogTest.TestClass&lt;/code>? By default, Serilog will simply call &lt;code>ToString&lt;/code> on your object. To destructure it, simply add &lt;code>a&lt;/code> before the field in your template&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">jsonLogger.Information(&lt;span style="color:#e6db74">&amp;#34;Useful log for object {@object}&amp;#34;&lt;/span>, obj);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And the output will be&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;@t&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2020-07-12T22:43:28.1525906Z&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;@m&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Useful log for object TestClass { SomeProperty: \&amp;#34;I am a property at the root level\&amp;#34;, SomeInnerClass: TestInnerClass { SomeOtherProperty: \&amp;#34;I am a property within a child\&amp;#34; } }&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;@i&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;99aea052&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;object&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;SomeProperty&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;I am a property at the root level&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;SomeInnerClass&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;SomeOtherProperty&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;I am a property within a child&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;$type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;TestInnerClass&amp;#34;&lt;/span>
},
&lt;span style="color:#f92672">&amp;#34;$type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;TestClass&amp;#34;&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As you can see, the entire object graph was included within the event. So much contextual information!&lt;/p>
&lt;p>But what if there are properties that you do not want to log? After all, it&amp;rsquo;s typically frowned upon to include information like passwords or personally identifiable information within them.&lt;/p>
&lt;p>Let&amp;rsquo;s reconfigure the logger to only log &lt;code>SomeProperty&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#66d9ef">var&lt;/span> jsonLogger = Log.Logger = &lt;span style="color:#66d9ef">new&lt;/span> LoggerConfiguration()
.WriteTo.Console(&lt;span style="color:#66d9ef">new&lt;/span> RenderedCompactJsonFormatter())
.Destructure.ByTransforming&amp;lt;TestClass&amp;gt;(c =&amp;gt; &lt;span style="color:#66d9ef">new&lt;/span> { c.SomeProperty })
.CreateLogger();
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Will give us&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;@t&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2020-07-12T22:49:44.7386801Z&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;@m&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Useful log for object { SomeProperty: \&amp;#34;I am a property at the root level\&amp;#34; }&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;@i&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;99aea052&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;object&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;SomeProperty&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;I am a property at the root level&amp;#34;&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We only included the property we wanted!&lt;/p>
&lt;p>Note that there are different ways to configure destructuring. A good start in the (awesomely named) &lt;a href="https://github.com/destructurama%5D">Destructurama!&lt;/a> organization.&lt;/p>
&lt;h3 id="type-conflicts">Type conflicts&lt;/h3>
&lt;p>Just a side note about destructing objects regarding conflicting types. Some log aggregating services will use the parameter names within templates to define types.&lt;/p>
&lt;p>An example of this is Elasticsearch.&lt;/p>
&lt;p>With the following statement&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">jsonLogger.Information(&lt;span style="color:#e6db74">&amp;#34;Hello {value}&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;world&amp;#34;&lt;/span>);
jsonLogger.Information(&lt;span style="color:#e6db74">&amp;#34;Hello {value}&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">new&lt;/span> { &lt;span style="color:#66d9ef">value&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;world&amp;#34;&lt;/span> });
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Since the first statement will generate a string field called &amp;ldquo;value&amp;rdquo; in the mapping, the second statement will not be logged, as Elasticsearch will complain about trying to fit an object within a string field.&lt;/p>
&lt;h3 id="tldr-1">TLDR&lt;/h3>
&lt;p>&lt;strong>DO&lt;/strong> include object graph when they add contextual information to your statements
&lt;strong>AVOID&lt;/strong> including unnecessary objects. They can clutter your logs, and if you&amp;rsquo;re pushing them to external services that charges by the size of logs you send them, it will quite literally cost you.
&lt;strong>DO&lt;/strong> Be mindful of conflicts that can happen with your parameter names&lt;/p>
&lt;h2 id="exceptions">Exceptions&lt;/h2>
&lt;p>The one thing to remember is that Serilog&amp;rsquo;s methods all have an overload that accepts an &lt;code>Exception&lt;/code> as the first parameter.&lt;/p>
&lt;p>So instead of writing statements including the exception as part of the message template&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#66d9ef">var&lt;/span> exception = &lt;span style="color:#66d9ef">new&lt;/span> Exception(&lt;span style="color:#e6db74">&amp;#34;Top exception&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">new&lt;/span> Exception(&lt;span style="color:#e6db74">&amp;#34;Inner exception&amp;#34;&lt;/span>));
jsonLogger.Information(exception, &lt;span style="color:#e6db74">&amp;#34;Exception&amp;#34;&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Which will include the exception within the &lt;code>exception&lt;/code> parameter&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;@t&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2020-07-12T23:01:14.1165769Z&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;@m&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Exception! \&amp;#34;System.Exception: Top exception\r\n ---&amp;gt; System.Exception: Inner exception\r\n --- End of inner exception stack trace ---\&amp;#34;&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;@i&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;e22b2a9a&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;exception&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;System.Exception: Top exception\r\n ---&amp;gt; System.Exception: Inner exception\r\n --- End of inner exception stack trace ---&amp;#34;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Simply include the exception as the first argument&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#66d9ef">var&lt;/span> exception = &lt;span style="color:#66d9ef">new&lt;/span> Exception(&lt;span style="color:#e6db74">&amp;#34;Top exception&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">new&lt;/span> Exception(&lt;span style="color:#e6db74">&amp;#34;Inner exception&amp;#34;&lt;/span>));
jsonLogger.Information(exception, &lt;span style="color:#e6db74">&amp;#34;Exception&amp;#34;&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And now all logged exceptions will be within the &lt;code>@x&lt;/code> field.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;@t&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2020-07-12T23:01:14.1532597Z&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;@m&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Exception&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;@i&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;7d53da39&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;@x&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;System.Exception: Top exception\r\n ---&amp;gt; System.Exception: Inner exception\r\n --- End of inner exception stack trace ---&amp;#34;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that this behaviour can change depending on your sink. For example, the &lt;a href="https://github.com/serilog/serilog-sinks-elasticsearch">Elasticsearch sink&lt;/a> will include the exceptions within an object array.&lt;/p>
&lt;h3 id="tldr-2">TLDR&lt;/h3>
&lt;p>&lt;strong>DO&lt;/strong> use Serilog&amp;rsquo;s overloads to pass exceptions instead of using the argument list.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>Those were just a few basic things to keep in mind when using Serilog. I stringly suggest visiting the &lt;a href="https://github.com/serilog/serilog/wiki/Writing-Log-Events">Writing log events&lt;/a> page for more information.&lt;/p></description><category>Serilog</category><category>.NET</category></item><item><title>Introduction to Action Constraints in ASP.NET Core</title><link>https://esg.dev/posts/introduction-to-action-constraints/</link><pubDate>Mon, 02 Dec 2019 18:45:08 -0500</pubDate><guid>https://esg.dev/posts/introduction-to-action-constraints/</guid><description>&lt;p>Ever had to integrate a 3rd party webhook into your application, only to realize that they won&amp;rsquo;t let you configure a different address for each type of events?&lt;/p>
&lt;p>A few years ago, I had to do just that for Github webhooks. Thankfully, they provide a HTTP header that describe the type of event being sent.&lt;/p>
&lt;p>At the time, I used a middleware to modify the route, but there are cleaner solutions out there. In this case, I could&amp;rsquo;ve used a feature in ASP.NET Core called &amp;ldquo;Action Constraints&amp;rdquo;, which allow you to impose constraint on otherwise identical routes.&lt;/p>
&lt;p>Note: This is a follow-up on a question I had a few years ago on &lt;a href="https://stackoverflow.com/questions/39302121/header-based-routing-in-asp-net-core">StackOverflow&lt;/a>, and I decided to dig a little deeper.&lt;/p>
&lt;h2 id="action-contraint-attribute">Action Contraint Attribute&lt;/h2>
&lt;p>ASP.NET Core has an interface called &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.actionconstraints.iactionconstraint?f1url=https%3A%2F%2Fmsdn.microsoft.com%2Fquery%2Fdev16.query%3FappId%3DDev16IDEF1%26l%3DEN-US%26k%3Dk(Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraint);k(DevLang-csharp)%26rd%3Dtrue&amp;amp;view=aspnetcore-3.0">&lt;code>IActionConstraint&lt;/code>&lt;/a> that can be implemented by an &lt;code>Attribute&lt;/code> class, which has only 2 members:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Order&lt;/code>, which will determine what order your constraint will be evaluated on (lowest number first)&lt;/li>
&lt;li>&lt;code>Accept(ActionConstraintContext)&lt;/code>, which needs to return a boolean that will tell the framework whether to use this route&lt;/li>
&lt;/ul>
&lt;p>Let&amp;rsquo;s see what an implementation can look like:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">HeaderConstraintAttribute&lt;/span> : Attribute, IActionConstraint
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> Order =&amp;gt; &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> Header { &lt;span style="color:#66d9ef">get&lt;/span>; }
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> Value { &lt;span style="color:#66d9ef">get&lt;/span>; }
&lt;span style="color:#66d9ef">public&lt;/span> HeaderConstraintAttribute(&lt;span style="color:#66d9ef">string&lt;/span> header, &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#66d9ef">value&lt;/span>)
{
Header = header;
Value = &lt;span style="color:#66d9ef">value&lt;/span>;
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> Accept(ActionConstraintContext context)
{
&lt;span style="color:#66d9ef">if&lt;/span> (context.RouteContext.HttpContext.Request.Headers.TryGetValue(Header, &lt;span style="color:#66d9ef">out&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#66d9ef">value&lt;/span>) &amp;amp;&amp;amp; &lt;span style="color:#66d9ef">value&lt;/span>.Any())
{
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">value&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>] == Value;
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>;
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Simple enough, right? Look for a matching &lt;code>Header&lt;/code> in the &lt;code>HttpContext&lt;/code>, and if present, match it with &lt;code>Value&lt;/code>.&lt;/p>
&lt;p>Now, let&amp;rsquo;s update our controller.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#a6e22e">[Route(&amp;#34;api/[controller]&lt;/span>&lt;span style="color:#e6db74">&amp;#34;)]
&lt;/span>&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#a6e22e">[ApiController]&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ActionController&lt;/span> : ControllerBase
{
&lt;span style="color:#a6e22e"> [HttpGet]&lt;/span>
&lt;span style="color:#a6e22e"> [HeaderConstraint(&amp;#34;MyHeader&amp;#34;, &amp;#34;A&amp;#34;)]&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> GetStringA()
{
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;A&amp;#34;&lt;/span>;
}
&lt;span style="color:#a6e22e">
&lt;/span>&lt;span style="color:#a6e22e"> [HttpGet]&lt;/span>
&lt;span style="color:#a6e22e"> [HeaderConstraint(&amp;#34;MyHeader&amp;#34;, &amp;#34;B&amp;#34;)]&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> GetStringB()
{
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;B&amp;#34;&lt;/span>;
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>There are 2 things to notice here:&lt;/p>
&lt;ul>
&lt;li>Both functions are HTTP Get, to the same route (&lt;code>/api/action&lt;/code> in this case)&lt;/li>
&lt;li>We&amp;rsquo;ve added the &lt;code>HeaderConstraintAttribute&lt;/code> on each route&lt;/li>
&lt;/ul>
&lt;p>Now, try using your HTTP API tool of choice, such as &lt;a href="https://www.getpostman.com/">Postman&lt;/a> or &lt;a href="https://insomnia.rest/">Insomnia&lt;/a>, and do a GET request to &lt;code>/api/action&lt;/code>.&lt;/p>
&lt;p>You should be getting a 404 Not Found error, which makes sense, since both routes are contrained, and neither are matching the contraint.&lt;/p>
&lt;p>Now, try passing a header called &lt;code>MyHeader&lt;/code> with the value &lt;code>A&lt;/code>.&lt;/p>
&lt;p>Surprise! The API returns &lt;code>A&lt;/code>. Change the header value to &lt;code>B&lt;/code>, the API now returns &lt;code>B&lt;/code>.&lt;/p>
&lt;p>This is obviously a very simple scenario, but when dealing with 3rd party APIs that sends different requests to the same address, it&amp;rsquo;s a great way to keep the routes seperated, use strong-typed classes and avoid using things like &lt;code>dynamic&lt;/code> variables.&lt;/p>
&lt;p>You can view the entire code written for this project on &lt;a href="https://github.com/EricStG/ActionConstraintDemo">GitHub&lt;/a>.&lt;/p></description><category>ASP.NET Core</category><category>.NET</category></item></channel></rss>