<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Let's Encrypt on ESG's</title><link>https://esg.dev/tags/lets-encrypt/</link><description>Recent content in Let's Encrypt on ESG's</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 16 Apr 2020 14:17:03 -0400</lastBuildDate><atom:link href="https://esg.dev/tags/lets-encrypt/index.xml" rel="self" type="application/rss+xml"/><item><title>Using Let's Encrypt with Azure CDN</title><link>https://esg.dev/posts/letsencrypt-on-azurecdn/</link><pubDate>Thu, 16 Apr 2020 14:17:03 -0400</pubDate><guid>https://esg.dev/posts/letsencrypt-on-azurecdn/</guid><description>&lt;p>As I was in the process of moving this blog from AWS to Azure, I found myself in an interesting position.&lt;/p>
&lt;p>Azure CDN can provision a certificate for HTTPS on its own, unless you are using the root domain (ex: &lt;code>esg.dev&lt;/code>), in which case you need to provide your own.&lt;/p>
&lt;p>I figured the cheapest way would be to use &lt;a href="https://letsencrypt.org/">Let&amp;rsquo;s Encrypt&lt;/a>, since it&amp;rsquo;s free. And Azure already supports it.&lt;/p>
&lt;p>Or does it? It looks like it can provision a certificate automatically for App Services, but not for Azure CDN.&lt;/p>
&lt;p>Let&amp;rsquo;s Encrypt&amp;rsquo;s &lt;a href="https://certbot.eff.org/">certbot&lt;/a> can automate this on a number of platforms, but not Azure CDN.&lt;/p>
&lt;p>So I had to manually (for now) create a certificate and then configure it on Azure CDN.&lt;/p>
&lt;p>These are the steps I took to make it happen.&lt;/p>
&lt;h2 id="creating-the-certificate-with-certbot">Creating the certificate with certbot&lt;/h2>
&lt;p>First, let&amp;rsquo;s setup &lt;a href="https://certbot.eff.org/">certbot&lt;/a>.&lt;/p>
&lt;p>You will need access to a Linux machine as there is no version of certbot available for Windows yet. In my case, I used Ubuntu on top for WSL, and I based the commands off the &lt;a href="https://certbot.eff.org/lets-encrypt/ubuntubionic-apache.html">Ubuntu documentation page&lt;/a> for certbot.&lt;/p>
&lt;h2 id="install-certbot">Install certbot&lt;/h2>
&lt;p>We&amp;rsquo;ll need to add the certbot PPA:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo apt-get update
sudo apt-get install software-properties-common
sudo add-apt-repository universe
sudo add-apt-repository ppa:certbot/certbot
sudo apt-get update
&lt;/code>&lt;/pre>&lt;/div>&lt;p>and then install certbot itself&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo apt-get install certbot
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="generate-the-certificate">Generate the certificate&lt;/h2>
&lt;p>Now we can use certbot to generate a new certificate in &lt;a href="https://certbot.eff.org/docs/using.html#manual">manual mode&lt;/a>.&lt;/p>
&lt;p>Note: It&amp;rsquo;s possible to run certbot without sudo, see &lt;a href="https://certbot.eff.org/faq/#does-certbot-require-root-administrator-privileges">https://certbot.eff.org/faq/#does-certbot-require-root-administrator-privileges&lt;/a> for more information.&lt;/p>
&lt;p>While Let&amp;rsquo;s Encrypt supports wildcard certificates (ex: &lt;code>*.esg.dev&lt;/code>), I only need &lt;code>www.esg.dev&lt;/code> and &lt;code>esg.dev&lt;/code>, so I&amp;rsquo;ll be specifying those via the &lt;code>-d&lt;/code> (domain) switch.&lt;/p>
&lt;p>We&amp;rsquo;ll also be using the DNS validation method, which involves adding TXT records to your DNS zone, specifically one for each domain within the certificate.&lt;/p>
&lt;p>Now we run the following to launch the certbot wizard.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo certbot certonly --cert-name esg.dev --manual -d esg.dev -d www.esg.dev --preferred-challenges dns
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Follow the instructions given by certbot.&lt;/p>
&lt;p>For each of the domain specified, create the TXT record with the values generated by certbot in your DNS provider of choice. In my case, it was for &lt;code>_acme-challenge.esg.dev&lt;/code> and &lt;code>_acme-challenge.www.esg.dev&lt;/code>.&lt;/p>
&lt;p>Certbot will verify those records. If the validation fails, you might need to re-start the generation process.&lt;/p>
&lt;p>This will have generated pem files for your domain, in my case, under &lt;code>/etc/letsencrypt/live/esg.dev/&lt;/code>.&lt;/p>
&lt;p>We still have one more step to take. Azure CDN didn&amp;rsquo;t like it when I tried to use the pem files, so let&amp;rsquo;s convert those to pfx to make our life a bit easier. We can do this with &lt;a href="https://www.openssl.org/">OpenSSL&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo pkcs12 -export -inkey /etc/letsencrypt/live/esg.dev/privkey.pem -in /etc/letsencrypt/live/esg.dev/fullchain.pem -name esg-dev -out esg.pfx
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will prompt you for a password, enter whatever you feel is appropriate.&lt;/p>
&lt;p>you now can upload the generated pfx file to an Azure key vault, which will allow you to configure Azure CDN with a custom certificate.&lt;/p>
&lt;h2 id="renewing-the-certificate">Renewing the certificate&lt;/h2>
&lt;p>Let&amp;rsquo;s Encrypt certificates have an expiry of 90 days.&lt;/p>
&lt;p>To renew the certificate, it&amp;rsquo;s important to remember that certbot&amp;rsquo;s &lt;code>renew&lt;/code> command is meant for non-interactive usage, and won&amp;rsquo;t work out of the box with the manual plugin.&lt;/p>
&lt;p>But all we need to do is re-run the &lt;em>same exact command&lt;/em> as we did the first time:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo certbot certonly --cert-name esg.dev --manual -d esg.dev -d www.esg.dev --preferred-challenges dns
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And then convert/upload the new certificate to your vault. You&amp;rsquo;ll also need to update your custom domains in Azure CDN to use the newer version of the certificate.&lt;/p>
&lt;h2 id="next-steps">Next steps&lt;/h2>
&lt;p>There are a few solutions out there to do this, but I&amp;rsquo;ve had had no real luck getting them working, and I wanted to understand the process by doing it manually first anyway.&lt;/p>
&lt;p>I&amp;rsquo;ll be looking at automating this in the near future as I&amp;rsquo;ll probably forget to do this every 90 days, so stay tuned!&lt;/p></description></item></channel></rss>