<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on ESG's</title><link>https://esg.dev/</link><description>Recent content in Home on ESG's</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 17 Jul 2022 18:01:55 -0400</lastBuildDate><atom:link href="https://esg.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Deferred processing in ASP.NET Core 6</title><link>https://esg.dev/posts/deferred-processing-in-aspnetcore/</link><pubDate>Sun, 17 Jul 2022 18:01:55 -0400</pubDate><guid>https://esg.dev/posts/deferred-processing-in-aspnetcore/</guid><description>&lt;p>Nowadays, a common pattern we see when treating HTTP requests is to do a minimal amount of work before returning a response, while treating longer operations (ex: sending email) in the background after the request has been completed.&lt;/p>
&lt;p>Unfortunately, in ASP.NET, we often see this being done in questionable ways, mainly:&lt;/p>
&lt;ul>
&lt;li>Not using &lt;code>await&lt;/code> on &lt;code>Task&lt;/code> object&lt;/li>
&lt;li>Wrapping some code in &lt;code>Task.Run&lt;/code> and not awaiting the results.&lt;/li>
&lt;/ul>
&lt;p>This can lead to dependency injection issues (if your request ends, all of our scoped objected are gone), or having exceptions thrown into the wind.&lt;/p>
&lt;p>Fortunately, .NET has it&amp;rsquo;s own internal publisher/subscriber-like feature, called Channels.&lt;/p>
&lt;h1 id="channels">Channels&lt;/h1>
&lt;p>Channels were first introducted in .NET Core 3.0. While they&amp;rsquo;ve had a few improvements since, the abstract classes were mostly unchanged.&lt;/p>
&lt;h2 id="the-basics">The basics&lt;/h2>
&lt;p>A lot has been written about how to usage channels, so I won&amp;rsquo;t go in too deep here.&lt;/p>
&lt;p>First, let&amp;rsquo;s go over the building blocks:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Channel&lt;/code>: Static class used to create channels&lt;/li>
&lt;li>&lt;code>Channel&amp;lt;T&amp;gt;&lt;/code>: Abstract class representing a channel&lt;/li>
&lt;li>&lt;code>ChannelReader&amp;lt;T&amp;gt;&lt;/code> and &lt;code>ChannelWriter&amp;lt;T&amp;gt;&lt;/code>: Abstract classes representing readers and writers to a channel&lt;/li>
&lt;/ul>
&lt;p>A simple setup would be:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> channel = Channel.CreateUnbounded&amp;lt;Model&amp;gt;();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> reader = channel.Reader;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> writer = channel.Writer;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="integration-with-aspnet-core">Integration with ASP.NET Core&lt;/h1>
&lt;p>We&amp;rsquo;ll be assuming that we want to process a model named, appropriately, &lt;code>Model&lt;/code>.&lt;/p>
&lt;h2 id="background-service">Background service&lt;/h2>
&lt;p>First, let&amp;rsquo;s created a &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/hosted-services?view=aspnetcore-6.0&amp;amp;tabs=visual-studio">HostedService&lt;/a> to receive the messages.&lt;/p>
&lt;p>We&amp;rsquo;ll be inheriting from &lt;code>BackgroundService&lt;/code> since it makes the implementation a little simpler.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ModelService&lt;/span> : BackgroundService
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">readonly&lt;/span> ChannelReader&amp;lt;Model&amp;gt; _channelReader;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">readonly&lt;/span> ILogger&amp;lt;Service&amp;gt; _logger;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ModelService(ChannelReader&amp;lt;Model&amp;gt; channelReader, ILogger&amp;lt;Service&amp;gt; logger)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _channelReader = channelReader;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _logger = logger;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> Task ExecuteAsync(CancellationToken stoppingToken)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (&lt;span style="color:#66d9ef">await&lt;/span> _channelReader.WaitToReadAsync(stoppingToken))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (_channelReader.TryRead(&lt;span style="color:#66d9ef">out&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> item))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _logger.LogInformation(&lt;span style="color:#e6db74">&amp;#34;Message is `{Message}`&amp;#34;&lt;/span>, item.Message);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Pretty simple, right?&lt;/p>
&lt;p>We pass a &lt;code>ChannelReader&amp;lt;Model&amp;gt;&lt;/code> to the constructor&lt;/p>
&lt;p>In the first &lt;code>while&lt;/code>, we wait for a message to be available in the channel. When there&amp;rsquo;s one, we enter the second while to read every messages available until exiting.&lt;/p>
&lt;p>We could simplify this into a single while, but this version is a little more performant since it always to get multiple messages from a channel without having to &lt;code>await&lt;/code>. More information on &lt;a href="https://devblogs.microsoft.com/dotnet/an-introduction-to-system-threading-channels/">An Introduction to System.Threading.Channels&lt;/a>&lt;/p>
&lt;h3 id="scoped-services">Scoped services&lt;/h3>
&lt;p>Note that the &lt;code>BackgroundService&lt;/code> here is a singleton, meaning that it won&amp;rsquo;t be able to access scoped services, such as EntityFramework Core&amp;rsquo;s &lt;code>DbContext&lt;/code>, which is often registered as scope.&lt;/p>
&lt;p>To get around that, you should inject an &lt;code>IServiceProvider&lt;/code> into your background service. Depending on performance consideration, I&amp;rsquo;d typically start with creating a new scope per incoming message, and looking into batching if there&amp;rsquo;s an issue.&lt;/p>
&lt;h2 id="wiring-the-dependency-injection">Wiring the dependency injection&lt;/h2>
&lt;p>We start by wiring the channel itself, as long as its reader and writer.&lt;/p>
&lt;p>Note that I&amp;rsquo;m using minimal API syntax here, but it should be easy to adapt to the older style syntax like ASP.NET Core 5.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>builder.Services.AddSingleton(Channel.CreateUnbounded&amp;lt;Model&amp;gt;());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>builder.Services.AddSingleton(p =&amp;gt; p.GetRequiredService&amp;lt;Channel&amp;lt;Model&amp;gt;&amp;gt;().Reader);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>builder.Services.AddSingleton(p =&amp;gt; p.GetRequiredService&amp;lt;Channel&amp;lt;Model&amp;gt;&amp;gt;().Writer);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>CreateUnbounded&lt;/code> means that there won&amp;rsquo;t be any item limits on the channel, other than the amount of memory available to your application.&lt;/p>
&lt;p>then, we wire the service.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>builder.Services.AddHostedService&amp;lt;ModelService&amp;gt;();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="setting-up-the-route">Setting up the route&lt;/h2>
&lt;p>We then setup a route to receive the messages. To make things easier, I made one that receives an array.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>app.MapPost(&lt;span style="color:#e6db74">&amp;#34;/messages&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">async&lt;/span> (ChannelWriter&amp;lt;Model&amp;gt; writer, ICollection&amp;lt;Model&amp;gt; models, CancellationToken cancellationToken) =&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">foreach&lt;/span> (&lt;span style="color:#66d9ef">var&lt;/span> model &lt;span style="color:#66d9ef">in&lt;/span> models)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">await&lt;/span> writer.WriteAsync(model, cancellationToken);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> StatusCodes.Status202Accepted;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="testing-it">Testing it&lt;/h2>
&lt;p>You can try it by making a POST to &lt;code>/Messages&lt;/code> with a payload such as&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>[
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#f92672">&amp;#34;Message&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;hello world&amp;#34;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#f92672">&amp;#34;Message&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;hello too&amp;#34;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#f92672">&amp;#34;Message&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;hello three&amp;#34;&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you want to make sure that the request returns before the messages are processed, you can add a &lt;code>Task.Delay&lt;/code> in &lt;code>ModelService&lt;/code> after each log message. The messages will slowly scroll in your application&amp;rsquo;s console, long after the request has completed.&lt;/p>
&lt;h1 id="parting-words">Parting words&lt;/h1>
&lt;p>This was a very simple demo of channels with ASP.NET Core. You can find a working demo at &lt;a href="https://github.com/EricStG/AspNetCoreChannels">https://github.com/EricStG/AspNetCoreChannels&lt;/a>.&lt;/p>
&lt;p>If you&amp;rsquo;re considering using channels in your application, consider spending some time configuring your channels. For example, I&amp;rsquo;d look at whether I should use a bounded or unbounded channel, and if I&amp;rsquo;ll be using a single reader or writer. Having it properly configured will improve performance and avoid unplanned nastiness.&lt;/p></description><category>ASP.NET Core</category><category>.NET</category><category>Channels</category></item><item><title>Is the future of work remote?</title><link>https://esg.dev/posts/is-the-future-of-work-remote/</link><pubDate>Mon, 26 Apr 2021 18:49:17 -0400</pubDate><guid>https://esg.dev/posts/is-the-future-of-work-remote/</guid><description>&lt;p>Since the start of this great pandemic of ours, there&amp;rsquo;s been a lot of virtual ink spilled about companies doing a shift to fully remote or hybrid models. As I&amp;rsquo;ve been working mostly remote since 2018, I thought I&amp;rsquo;d chime in on the matter.&lt;/p>
&lt;p>Spoiler: I often say that articles asking a &amp;ldquo;Yes&amp;rdquo; or &amp;ldquo;No&amp;rdquo; question in the titles can usually be answered by &amp;ldquo;No&amp;rdquo;. This is no exception.&lt;/p>
&lt;h2 id="remote-work-takes-effort">Remote work takes effort&lt;/h2>
&lt;p>I&amp;rsquo;ve seen inside a few companies during their shift to remote. Some of them are doing well, but others&amp;hellip; not so much. There seem to be patterns in the later, such as:&lt;/p>
&lt;h3 id="not-embracing-asynchronicity">Not embracing asynchronicity&lt;/h3>
&lt;p>Requiring employees to do work during strict office hours, such as 9 to 5, eliminates some of the advantages of remote work. This is especially true when the team isn&amp;rsquo;t all in the same timezone.
At most, the team should be setting some core hours where everyone is around for collaboration purposes, with meetings scheduled within those hours.
Reality is, for software development, a number of tasks are usually done in isolation, and there isn&amp;rsquo;t much reason to constrain working on those during certain hours.&lt;/p>
&lt;h3 id="requiring-cameras">Requiring cameras&lt;/h3>
&lt;p>&lt;a href="https://news.stanford.edu/2021/02/23/four-causes-zoom-fatigue-solutions/">Zoom fatigue&lt;/a> is real, and cameras are a big reason for this. I find that in group meetings, being allowed to turn the camera off allows me to relax quite a bit more and spend more energy toward the discussion instead of faces.
Requiring cameras to be turned on, on worse, calling on specific people in group meetings to turn on their cameras, is detrimental to the conversation.&lt;/p>
&lt;h3 id="not-trusting-employees">Not trusting employees&lt;/h3>
&lt;p>There&amp;rsquo;s more and more software available to measure &amp;ldquo;employee engagement&amp;rdquo; during working hours. When a company can&amp;rsquo;t trust its own employees, I doubt that they&amp;rsquo;ll be very successful working in a distributed fashion.&lt;/p>
&lt;h3 id="mandatory-fun-times">Mandatory fun times&lt;/h3>
&lt;p>To compensate for the lack of contact outside of normal meetings, some places create mandatory fun meetings where people can chat, play games, have a drink, what have you.
To me, the idea of forcing people in attending even more meetings than required, and have fun doing it, is a more than a little flawed.&lt;/p>
&lt;p>If you want have a social hour, that&amp;rsquo;s not a bad idea on its own, but please don&amp;rsquo;t make it mandatory, and don&amp;rsquo;t shame people if they can&amp;rsquo;t or simply don&amp;rsquo;t want to attend on a specific day.&lt;/p>
&lt;h2 id="hybrid-model">Hybrid model&lt;/h2>
&lt;p>I think the hybrid model where you allow people to either work in office or remote can work well, with some caveats.&lt;/p>
&lt;p>If the team has at least one person remote, avoid conference rooms for the people in the office. I find that it creates two levels of conversations, and the remote folks are often excluded, especially since conference room microphones can be finicky. Instead, let people join the meetings from whatever desk they are at, whether in the office or remote.&lt;/p>
&lt;p>Another thing to look at would be reorganizing your teams into co-located vs remote teams. It can seems drastic, but it could help mitigate inequalities between teammates.&lt;/p>
&lt;h2 id="remote-work-is-a-privilege">Remote work is a privilege&lt;/h2>
&lt;p>Not everyone has the right environment to work from home effectively. Personally, I need a dedicated room so I can separate home and work. I also need a stable and fast-ish internet connection for meetings and VPN access. While I have everything I need, that&amp;rsquo;s not the case for everyone. My hometown still can&amp;rsquo;t get reliable Internet access to this date! (It&amp;rsquo;s never a good sign when the single cable company is owned by the single telco!)&lt;/p>
&lt;h2 id="not-every-one-wants-to-work-remote">Not every one wants to work remote.&lt;/h2>
&lt;p>Yes, we hear from everyone about working from home can be great and all that. But for some, working in offices is preferable. Personally, I didn&amp;rsquo;t enjoy remote work at all at first, but over time I&amp;rsquo;ve learned to appreciate it. I&amp;rsquo;d still like to go back to an office one day, at long as it&amp;rsquo;s not an &lt;a href="https://slate.com/human-interest/2019/01/jobs-workplace-privacy-open-offices-cubicles.html">open office&lt;/a> anyway&amp;hellip;&lt;/p>
&lt;h2 id="my-predictions">My predictions&lt;/h2>
&lt;p>Nothing Earth shattering here, but here&amp;rsquo;s what I think will happen in the next few years:&lt;/p>
&lt;ul>
&lt;li>Even more companies will switch to remote or hybrid work, but the vast majority will go back to office works&lt;/li>
&lt;li>Some of the companies who did the switch to remote will re-open offices due to not being able to figure out this remote thing properly&lt;/li>
&lt;li>New tools will come along, such as
&lt;ul>
&lt;li>Half of which will be glorified chat rooms with obnoxious notifications&lt;/li>
&lt;li>A quarter will be monitoring tools&lt;/li>
&lt;li>And at least 10% will try to solve problems no one has&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>We&amp;rsquo;ll see a few articles about how this one person in a company of thousands hasn&amp;rsquo;t worked in X months or years and still got their paycheck
&lt;ul>
&lt;li>Bad managers will freak out about this, when in reality we all know someone who has worked in an office and hasn&amp;rsquo;t done anything in years&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>In the end, people will have more options to choose how they want to work. That&amp;rsquo;s a good thing!&lt;/p></description><category>Remote Work</category><category>Software Development</category></item><item><title>Editorconfig integration with Visual Studio and .NET</title><link>https://esg.dev/posts/editorconfig-with-visual-studio/</link><pubDate>Sun, 21 Feb 2021 19:01:55 -0500</pubDate><guid>https://esg.dev/posts/editorconfig-with-visual-studio/</guid><description>&lt;p>If you are not familiar with &lt;a href="https://editorconfig.org/">EditorConfig&lt;/a> files, you&amp;rsquo;re missing out&lt;/p>
&lt;p>Today, I&amp;rsquo;ll walk you through some of the basic features, as well as some extensions to the format supported by Visual Studio and the .NET tools.&lt;/p>
&lt;h1 id="the-basics">The basics&lt;/h1>
&lt;p>Editorconfig is a way to define some coding styles by adding files called &lt;code>.editorconfig&lt;/code> to your code repository.
There&amp;rsquo;s pretty wide support from editors out there that supports it either natively, like &lt;a href="https://docs.microsoft.com/en-us/visualstudio/ide/create-portable-custom-editor-options?view=vs-2019">Visual Studio&lt;/a>, or through add-ons, like &lt;a href="https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig">Visual Studio Code&lt;/a>.&lt;/p>
&lt;h2 id="hierarchy">Hierarchy&lt;/h2>
&lt;p>Editorconfig us a hierarchical configuration for code style, meaning that when a code file is open, it will apply every settings from &lt;code>.editorconfig&lt;/code> files it finds, from the file&amp;rsquo;s folder, up to the root of the file system.&lt;/p>
&lt;p>The closer to the code file the config is, the higher the priority.&lt;/p>
&lt;p>You can make prevent scanning parent directories by specifying &lt;code>root = true&lt;/code> in your &lt;code>.editorconfig file&lt;/code>.&lt;/p>
&lt;h2 id="syntax">Syntax&lt;/h2>
&lt;p>Editorconfig files are split into sections. Each section starts with a file selector, as determined by square brackets &lt;code>[]&lt;/code>.&lt;/p>
&lt;p>This selector can apply to every file like &lt;code>[*]&lt;/code>, a simple wildcard like &lt;code>[*.json]&lt;/code>, or a list of extensions like &lt;code>[*.{cs, vb}]&lt;/code>&lt;/p>
&lt;p>Consider the following example:&lt;/p>
&lt;pre tabindex="0">&lt;code>root = true
[*]
indent_style = space
[*.{cs,vb}]
indent_size = 4
insert_final_newline = true
charset = utf-8-bom
&lt;/code>&lt;/pre>&lt;p>First, we have &lt;code>root = true&lt;/code>, meaning that we won&amp;rsquo;t be scanning any parent folders for more &lt;code>.editorconfig&lt;/code> files.&lt;/p>
&lt;p>Then, we have a &lt;code>[*]&lt;/code> block that applies to every file, saying we will be using &lt;a href="https://www.youtube.com/watch?v=SsoOG6ZeyUI">space&lt;/a> to indent.&lt;/p>
&lt;p>And last, we have the &lt;code>[*.{cs,vb}]&lt;/code> block that will apply to all files with a &lt;code>.cs&lt;/code> or &lt;code>.vb&lt;/code> extension.
Those files will have a indent of 4 (using spaces since the content of the &lt;code>[*]&lt;/code> block is still being applied), we want to ensure the presence of an empty line at the end of each file, and we are using the UTF-8 character set with the byte order mark.&lt;/p>
&lt;p>Tip: If using git, you will want to make sure that your &lt;a href="https://git-scm.com/docs/gitattributes">gitattribute&lt;/a> don&amp;rsquo;t conflict with your &lt;code>.editorconfig&lt;/code> settings, otherwise your editor might trying to undo what git is doing on checkout, causing a bunch of changes that aren&amp;rsquo;t wanted.&lt;/p>
&lt;h2 id="net-specific-extensions">.NET specific extensions&lt;/h2>
&lt;p>With the Roslyn compiler, there&amp;rsquo;s a number of extensions to the Editorconfig format that allows to configure code analysis.&lt;/p>
&lt;p>For example, you can use Editorconfig to tell whether using clauses should be sorted with the &lt;code>System&lt;/code> namespace first&lt;/p>
&lt;pre tabindex="0">&lt;code>[*.{cs,vb}]
dotnet_sort_system_directives_first = true
&lt;/code>&lt;/pre>&lt;p>You want contributors to use &lt;code>var&lt;/code> for C# built-in types? Done!&lt;/p>
&lt;pre tabindex="0">&lt;code>csharp_style_var_for_built_in_types = true
&lt;/code>&lt;/pre>&lt;p>You can even make it an error:&lt;/p>
&lt;pre tabindex="0">&lt;code>csharp_style_var_for_built_in_types = true:error
&lt;/code>&lt;/pre>&lt;p>You can also configure casing, as well as prefix and suffix. This will give a warning for any fields that are not camel case, and not prefixed with an underscore &lt;code>_&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code>dotnet_naming_rule.instance_fields_should_be_camel_case.severity = warning
dotnet_naming_rule.instance_fields_should_be_camel_case.symbols = instance_fields
dotnet_naming_rule.instance_fields_should_be_camel_case.style = instance_field_style
dotnet_naming_symbols.instance_fields.applicable_kinds = field
dotnet_naming_style.instance_field_style.capitalization = camel_case
dotnet_naming_style.instance_field_style.required_prefix = _
&lt;/code>&lt;/pre>&lt;p>See the &lt;a href="https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/overview">official documentation&lt;/a> for more options. The [Roslyn .editorconfig] also has number of good examples.&lt;/p>
&lt;h2 id="configuring-code-analysis">Configuring code analysis&lt;/h2>
&lt;p>If you&amp;rsquo;re familiar with Visual Studio and Code Analysis, you might have had to configure it through xml via &lt;a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/using-rule-sets-to-group-code-analysis-rules?view=vs-2019">.ruleset&lt;/a> files.&lt;/p>
&lt;p>That&amp;rsquo;s no longer necessary, as it can be done through Editorconfig!&lt;/p>
&lt;p>All you need is a line that reads &lt;code>dotnet_diagnostic.&amp;lt;Code&amp;gt;.severity = &amp;lt;Severity&amp;gt;&lt;/code>, such as:&lt;/p>
&lt;pre tabindex="0">&lt;code>[*.{cs,vb}]
dotnet_diagnostic.RCS1007.severity = error
&lt;/code>&lt;/pre>&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>Whenever you a small or a large team, having common code styles in your project can help minimize head scratching when reading a teammate&amp;rsquo;s code (or let&amp;rsquo;s be honest, your past self&amp;rsquo;s code as well).
With Editorconfig, you have a standard way that&amp;rsquo;s not tied to specific technologies to help make those styling standard happens.&lt;/p>
&lt;p>What coding styles do you apply to your project?&lt;/p></description><category>visual studio</category><category>.net</category></item><item><title>Using HttpClient with System.Text.Json</title><link>https://esg.dev/posts/httpclient-with-system-text-json/</link><pubDate>Fri, 22 Jan 2021 17:01:55 -0500</pubDate><guid>https://esg.dev/posts/httpclient-with-system-text-json/</guid><description>&lt;p>When working with JSON and &lt;code>HttpClient&lt;/code> in the .NET Framework, it was pretty common to add a reference to &lt;a href="https://www.nuget.org/packages/Microsoft.AspNet.WebApi.Client/">Microsoft.AspNet.WebApi.Client&lt;/a>, which added a number of extension methods to &lt;code>HttpClient&lt;/code> and &lt;code>HttpResponseMessage&lt;/code> that made it simpler to send and receive JSON documents.&lt;/p>
&lt;p>That package still work with .NET Core, but it has a dependency on the &lt;a href="https://www.nuget.org/packages/Newtonsoft.Json/">Newtonsoft.Json&lt;/a>. Since .NET Core 3+ comes with &lt;a href="https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-how-to?pivots=dotnet-5-0">System.Text.Json&lt;/a>, a more async friendly JSON parser, it might be worth making the switch, espcially in newer projects.&lt;/p>
&lt;p>Conveniently, there&amp;rsquo;s also a package called &lt;a href="https://www.nuget.org/packages/System.Net.Http.Json/">System.Net.Http.Json&lt;/a> that includes extension methods to make your serialization and deserializion easier.&lt;/p>
&lt;h1 id="microsoftaspnetwebapiclient">Microsoft.AspNet.WebApi.Client&lt;/h1>
&lt;p>This section will show a few calls made with &lt;code>Microsoft.AspNet.WebApi.Client&lt;/code>.&lt;/p>
&lt;p>The assumption is that you have an &lt;code>HttpClient&lt;/code> already instanciated with the name &lt;code>client&lt;/code>, a request model called &lt;code>RequestModel&lt;/code>, and a response model called &lt;code>ResponseModel&lt;/code>.&lt;/p>
&lt;h2 id="a-basic-get">A basic GET&lt;/h2>
&lt;p>First, we get a &lt;code>HttpResponseMessage&lt;/code> from the client by making a request.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>HttpResponseMessage response = &lt;span style="color:#66d9ef">await&lt;/span> client.GetAsync(&lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then, we using the generic verion of the &lt;code>ReadAsAsync&amp;lt;T&amp;gt;&lt;/code> extension method to read and deserialize the JSON document into our object.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>Task&amp;lt;ResponseModel&amp;gt; responseModel = &lt;span style="color:#66d9ef">await&lt;/span> response.Content.ReadAsAsync&amp;lt;ResponseModel&amp;gt;();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="a-post-with-a-request-document">A POST with a request document&lt;/h2>
&lt;p>Sending a document is also pretty straightforward.&lt;/p>
&lt;p>First, we initialize our request model.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>RequestModel requestModel = &lt;span style="color:#66d9ef">new&lt;/span> RequestModel();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then, we make our request, including our model that will get serialized through the &lt;code>PostAsJsonAsync&lt;/code> extension method.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>HttpResponseMessage response = &lt;span style="color:#66d9ef">await&lt;/span> client.PostAsJsonAsync(&lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>, requestModel);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally, we read the response model, just like we did for the GET.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>ResponseModel responseModel = &lt;span style="color:#66d9ef">await&lt;/span> response.Content.ReadAsAsync&amp;lt;ResponseModel&amp;gt;();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="systemnethttpjson">System.Net.Http.Json&lt;/h1>
&lt;p>Here, we&amp;rsquo;ll be doing the same exact thing, but using the extension methods in &lt;code>System.Net.Http.Json&lt;/code> instead.&lt;/p>
&lt;h2 id="a-basic-get-1">A basic GET&lt;/h2>
&lt;p>Again, we get a &lt;code>HttpResponseMessage&lt;/code> from the client by making a request. This is the same as for &lt;code>Microsoft.AspNet.WebApi.Client&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>HttpResponseMessage response = &lt;span style="color:#66d9ef">await&lt;/span> client.GetAsync(&lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then, we using the generic verion of the &lt;code>ReadFromJsonAsync&amp;lt;T&amp;gt;&lt;/code> extension method to read and serialize the JSON document into our object.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>ResponseModel responseModel = &lt;span style="color:#66d9ef">await&lt;/span> response.Content.ReadFromJsonAsync&amp;lt;ResponseModel&amp;gt;();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that if you don&amp;rsquo;t need to do any processing on the &lt;code>HttpResponseMessage&lt;/code>, there&amp;rsquo;s also a convenience method called &lt;code>GetFromJsonAsync&lt;/code> so you can skip that step entirely.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>ResponseModel responseModel = &lt;span style="color:#66d9ef">await&lt;/span> client.GetFromJsonAsync&amp;lt;ResponseModel&amp;gt;(&lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="a-post-with-a-request-document-1">A POST with a request document&lt;/h2>
&lt;p>Sending a document is also pretty straightforward.&lt;/p>
&lt;p>First, we initialize our request model.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>RequestModel requestModel = &lt;span style="color:#66d9ef">new&lt;/span> RequestModel();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then, we make our request, including our model that will get serialized through the &lt;code>PostAsJsonAsync&lt;/code> extension method, which conveniently has the same name as the extension method from &lt;code>Microsoft.AspNet.WebApi.Client&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>HttpResponseMessage response = &lt;span style="color:#66d9ef">await&lt;/span> client.PostAsJsonAsync(&lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>, requestModel);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally, we read the response model, just like we did for the GET.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>ResponseModel responseModel = &lt;span style="color:#66d9ef">await&lt;/span> response.Content.ReadFromJsonAsync&amp;lt;ResponseModel&amp;gt;();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="final-notes">Final notes&lt;/h1>
&lt;p>While serializing and deserializing documents with the &lt;code>HttpClient&lt;/code> isn&amp;rsquo;t particularly challenging, it does lead to a fair amount of repetition, so using these extension methods (or rolling your own!) should make your code look a lot leaner.&lt;/p></description><category>.net</category></item><item><title>Thoughts on Job Titles</title><link>https://esg.dev/posts/thoughts-on-job-titles/</link><pubDate>Sat, 24 Oct 2020 20:15:26 -0400</pubDate><guid>https://esg.dev/posts/thoughts-on-job-titles/</guid><description>&lt;p>Job titles are funny thing. Their meanings vary so wildly that they should hold no importance at all. For example, I&amp;rsquo;ve seen postings for &amp;ldquo;Senior software developer&amp;rdquo; where the amount of required experience varied from 5 to over 10 years of experience. That&amp;rsquo;s a pretty big gap!&lt;/p>
&lt;p>Yet, having a title that doesn&amp;rsquo;t match your responsibilities can hurt your career in significant ways, because the chances of someone being hired for a position that has a title they never held is pretty slim! You might even get rejected by automation without humans ever seeing your resume&amp;hellip;&lt;/p>
&lt;h1 id="do-titles-matter">Do titles matter?&lt;/h1>
&lt;p>I&amp;rsquo;ve heard that line many times. Usually from someone with a fancy title, &amp;ldquo;Director of X&amp;rdquo; or above.&lt;/p>
&lt;p>Truth is, when you start a new position, title is one of the principal factor determining your starting salary &amp;amp; benefits. And as I&amp;rsquo;ve said above, good luck being hired for a title that you never had.&lt;/p>
&lt;p>There&amp;rsquo;s also folks that glorify their title so much, you wonder if they have any kind of identity without it. I&amp;rsquo;ve even seen gifs in signature to show off titles. I don&amp;rsquo;t know what to make of those!&lt;/p>
&lt;p>So do titles matter? Well, it depends!&lt;/p>
&lt;h1 id="titles-should-matter">Titles SHOULD matter&lt;/h1>
&lt;p>I think titles should be less a reflection of past achievements, but rather as a representation of current responsibilities.&lt;/p>
&lt;p>Each company should be able to define WHAT a title means, especially when it comes to Individual Contributors (folks not part of management).&lt;/p>
&lt;p>Let&amp;rsquo;s take a simple scenario:&lt;/p>
&lt;ul>
&lt;li>Junior developer&lt;/li>
&lt;li>Intermediate developer&lt;/li>
&lt;li>Senior developer&lt;/li>
&lt;/ul>
&lt;p>What&amp;rsquo;s the difference between the 3? It seems to often be limited to years of experience, but that&amp;rsquo;s too simplistic in my opinion.&lt;/p>
&lt;p>As one&amp;rsquo;s career grows, I expect that their contributions will affect a wider group, such as being involved in process, architecture, and anything else that will impact more than your own world.&lt;/p>
&lt;p>On the other side, if you&amp;rsquo;ve been working for 10+ years but your contributions are limited to only writing code to the tasks assigned to you, you&amp;rsquo;re not a &amp;ldquo;senior&amp;rdquo;, you&amp;rsquo;re a junior with a long resume.&lt;/p>
&lt;h1 id="competency-matrix">Competency matrix&lt;/h1>
&lt;p>A few years ago, I stumble on this &lt;a href="https://circleci.com/blog/why-we-re-designed-our-engineering-career-paths-at-circleci/">great blog post&lt;/a> about CircleCI&amp;rsquo;s engineering career paths. Go check it out, it&amp;rsquo;s a thing of beauty!&lt;/p>
&lt;p>Having well defined roles has multiple benefits such as clear expectations for each positions and tangible career progression paths. You can even frame your performance reviews around this so you have something to talk about! (Sorry, sore subject!)&lt;/p>
&lt;h1 id="in-closing">In closing&lt;/h1>
&lt;p>I think titles tend to have a bad reputation because it&amp;rsquo;s fairly common to folks who abuse them.&lt;/p>
&lt;p>If you:&lt;/p>
&lt;ul>
&lt;li>Wield your title like a weapon&lt;/li>
&lt;li>Judge if others are worth of your time based on their titles&lt;/li>
&lt;li>Use your title as an argument when debating a position&lt;/li>
&lt;li>Reject code review comments from folks with less seniority&lt;/li>
&lt;/ul>
&lt;p>Then, sorry to say, you might not be super fun to work with.&lt;/p>
&lt;p>But if defined and framed properly, they can add value to both employers and employees alike.&lt;/p></description><category>Career</category></item><item><title>Stupid Git tricks: Merging and splitting repositories</title><link>https://esg.dev/posts/git-merge-split/</link><pubDate>Mon, 21 Sep 2020 14:01:55 -0400</pubDate><guid>https://esg.dev/posts/git-merge-split/</guid><description>&lt;p>Maybe it&amp;rsquo;s due to working mainly in small shops, but I&amp;rsquo;ve had to merge and split git repositories a number of times in the past few years (usually related to folks pushing for microservice architecture, and then changing their minds).&lt;/p>
&lt;p>Fortunately, git allows us to do both operations without losing the history.&lt;/p>
&lt;p>Needless to say, those operations should not be part of your daily flow, but it&amp;rsquo;s good to have in your toolbox if you ever find yourself in a situation that requires it.&lt;/p>
&lt;h1 id="warning">Warning&lt;/h1>
&lt;p>Some of the operations described here, especially when it comes to splitting, are extremely destructive as they can rewrite your git history. As a result, other contributors may not be able to push or send pull requests anymore.&lt;/p>
&lt;p>Ideally, these operations should be done on fresh clones, and pushed to new remotes.&lt;/p>
&lt;h1 id="merging">Merging&lt;/h1>
&lt;p>Let&amp;rsquo;s say you have 2 local repositories that you want to merge, called &lt;code>A&lt;/code> and &lt;code>B&lt;/code>, and you want to copy the history of &lt;code>A&lt;/code> into &lt;code>B&lt;/code>.&lt;/p>
&lt;h2 id="step-1-organization">Step 1: Organization&lt;/h2>
&lt;p>In order to save yourself some headaches, it&amp;rsquo;s better to plan ahead how you want the final repository layout to be. You&amp;rsquo;ll also want to move files around to avoid any conflicts.&lt;/p>
&lt;p>For simplicity, I want the end result to be:&lt;/p>
&lt;pre tabindex="0">&lt;code>src/A
src/B
&lt;/code>&lt;/pre>&lt;p>In the &lt;code>A&lt;/code> repository, using whatever tools you want, create the &lt;code>src/A&lt;/code> directory and move everything in there.&lt;/p>
&lt;p>After that, execute &lt;code>git add -A&lt;/code> to update the index and make sure you &lt;code>git commit&lt;/code>.&lt;/p>
&lt;p>Repeat the process for repository &lt;code>B&lt;/code>.&lt;/p>
&lt;p>And now everything should be where you want it to be.&lt;/p>
&lt;h2 id="step-2-pull">Step 2: Pull&lt;/h2>
&lt;p>From the &lt;code>B&lt;/code> repository, you will need to &lt;code>git pull&lt;/code> with the &lt;code>allow-unrelated-histories&lt;/code> to, surprise, allow the unrelated histories of both repositories to be merged together.&lt;/p>
&lt;p>If both repositories are within the same directory, you&amp;rsquo;d can use this: &lt;code>git pull --allow-unrelated-histories ../A&lt;/code>.&lt;/p>
&lt;p>Once that&amp;rsquo;s done, check the content of your repository and your &lt;code>git log&lt;/code> to make sure that everything is good, and then you are done!&lt;/p>
&lt;h1 id="splitting">Splitting&lt;/h1>
&lt;p>In this scenario, we&amp;rsquo;ll be reverting the changes we&amp;rsquo;ve done above, going from 1 repository containing:&lt;/p>
&lt;pre tabindex="0">&lt;code>src/A
src/B
&lt;/code>&lt;/pre>&lt;p>and split them back into 2 repositories, with the content at the root of each ones.&lt;/p>
&lt;h2 id="danger-will-robinson">Danger Will Robinson&lt;/h2>
&lt;p>Splitting a repository is a highly destructive operation. Not only is it possible to lose the content of your repository, in fact, that&amp;rsquo;s basically how the tool works. It &lt;em>rewrites the history&lt;/em> and wipes out any traces of the items you have taken out.&lt;/p>
&lt;p>Even when things go well, and you can stitch the repositories back into one using the steps above, commits that used to contain changes that were formerly in the same repository will stay separate. That data is gone forever.&lt;/p>
&lt;h2 id="prerequisite">Prerequisite&lt;/h2>
&lt;p>For this operation, we&amp;rsquo;ll be using a 3rd party tool called &lt;a href="https://github.com/newren/git-filter-repo/">git filter-repo&lt;/a>. Note that this tool is a recommendation from the &lt;a href="https://git-scm.com/docs/git-filter-branch">git filter-branch&lt;/a> man pages.&lt;/p>
&lt;p>&lt;a href="https://github.com/newren/git-filter-repo/blob/main/INSTALL.md">Install&lt;/a> it for your environment and we&amp;rsquo;ll be good to go.&lt;/p>
&lt;h2 id="cloning">Cloning&lt;/h2>
&lt;p>To makes things easier, do 2 fresh clones of your repository. Each clones will be rewritten with only the content we want.&lt;/p>
&lt;h2 id="using-git-filter-repo">Using git filter-repo&lt;/h2>
&lt;p>Open your command prompt/shell/terminal into the root of your first clone.&lt;/p>
&lt;p>Now type &lt;code>git filter-repo --subdirectory-filter src/A&lt;/code>&lt;/p>
&lt;p>This will remove everything that is NOT under &lt;code>src/A&lt;/code> and move the content to the root of the repository.&lt;/p>
&lt;p>Repeat the same operation for your second clone, changing &lt;code>src/A&lt;/code> to &lt;code>src/B&lt;/code>, and you are done!&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>These are some of the ways I&amp;rsquo;ve used in the past to split and merge git repositories. What are yours? Hit me up on &lt;a href="https://twitter.com/Eric_STG">twitter&lt;/a>!&lt;/p></description><category>git</category></item><item><title>Serilog Do's and Don'ts</title><link>https://esg.dev/posts/serilog-dos-and-donts/</link><pubDate>Sun, 12 Jul 2020 18:08:20 -0400</pubDate><guid>https://esg.dev/posts/serilog-dos-and-donts/</guid><description>&lt;p>&lt;a href="https://serilog.net/">Serilog&lt;/a> is a structured logger for &lt;a href="https://dotnet.microsoft.com/">.NET&lt;/a>, and as such, for folks who are used to traditional console loggers, requires the developer to think about their logs a little more than normal.&lt;/p>
&lt;p>This post is not meant to be a how to, but rather a non-comprehensive list of mistakes I&amp;rsquo;ve seen over time.&lt;/p>
&lt;h2 id="templating">Templating&lt;/h2>
&lt;p>One thing to keep in mind is that when writing an event to the log, you are not passing a message, but a &lt;em>template&lt;/em>. The tags you pass within curly branches do have meaning, and will be used to add data the event. It is therefore important to not format the message before passing logging it.&lt;/p>
&lt;p>Consider a logger with a basic console sink&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> textLogger = Log.Logger = &lt;span style="color:#66d9ef">new&lt;/span> LoggerConfiguration()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .WriteTo.Console()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .CreateLogger();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>With two very basic statements&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>textLogger.Information(&lt;span style="color:#e6db74">$&amp;#34;Hello {world}&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>textLogger.Information(&lt;span style="color:#e6db74">&amp;#34;Hello {value}&amp;#34;&lt;/span>, world);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Will output:&lt;/p>
&lt;pre tabindex="0">&lt;code>[18:19:18 INF] Hello World
[18:19:18 INF] Hello World
&lt;/code>&lt;/pre>&lt;p>Can you spot the difference? Spoiler: There isn&amp;rsquo;t one! So what&amp;rsquo;s the problem then?&lt;/p>
&lt;p>Well, let&amp;rsquo;s use the &lt;a href="https://github.com/serilog/serilog-formatting-compact">JSON Formatter&lt;/a> instead:&lt;/p>
&lt;p>(note: I&amp;rsquo;m using the &lt;a href="https://github.com/serilog/serilog-formatting-compact#rendered-events">Rendered&lt;/a> formatter so we can see the rendered template within each event)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> jsonLogger = Log.Logger = &lt;span style="color:#66d9ef">new&lt;/span> LoggerConfiguration()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .WriteTo.Console(&lt;span style="color:#66d9ef">new&lt;/span> RenderedCompactJsonFormatter())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .CreateLogger();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>With the same statements&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>jsonLogger.Information(&lt;span style="color:#e6db74">$&amp;#34;Hello {world}&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>jsonLogger.Information(&lt;span style="color:#e6db74">&amp;#34;Hello {value}&amp;#34;&lt;/span>, world);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Will give us:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;@t&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2020-07-12T22:26:19.6616913Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;@m&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Hello World&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;@i&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;00ba5a14&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;@t&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2020-07-12T22:26:19.6659300Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;@m&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Hello \&amp;#34;World\&amp;#34;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;@i&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;40c34e37&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;value&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;World&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When using &lt;code>textLogger.Information(&amp;quot;Hello {value}&amp;quot;, world)&lt;/code>, there is now a field called &lt;code>value&lt;/code> with the argument we passed to the logging statements.
In addition, the &lt;code>@i&lt;/code> field will have the same value every time this statement will run, so you have a fixed item to search for if you want to search for every value being logged by this particular statement.&lt;/p>
&lt;h3 id="tldr">TLDR&lt;/h3>
&lt;p>&lt;strong>DON&amp;rsquo;T&lt;/strong> format messages before passing them to the logger&lt;/p>
&lt;h2 id="destructuring">Destructuring&lt;/h2>
&lt;p>One of the benefit of having a structured logger versus a flat one, is, well, &lt;em>structure&lt;/em>. You are not limited to logging simple values, you can include entire object graphs. This process is called &lt;em>Destructuring&lt;/em>.&lt;/p>
&lt;p>Let&amp;rsquo;s consider the following classes&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">TestInnerClass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> SomeOtherProperty { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">TestClass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> SomeProperty { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> TestInnerClass SomeInnerClass { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let&amp;rsquo;s initialize an instance&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> obj = &lt;span style="color:#66d9ef">new&lt;/span> TestClass
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SomeInnerClass = &lt;span style="color:#66d9ef">new&lt;/span> TestInnerClass
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SomeOtherProperty = &lt;span style="color:#e6db74">&amp;#34;I am a property within a child&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SomeProperty = &lt;span style="color:#e6db74">&amp;#34;I am a property at the root level&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And let&amp;rsquo;s include it a logging statement&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>jsonLogger.Information(&lt;span style="color:#e6db74">&amp;#34;Useful log for object {object}&amp;#34;&lt;/span>, obj);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will output&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;@t&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2020-07-12T22:43:28.1191964Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;@m&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Useful log for object \&amp;#34;SerilogTest.TestClass\&amp;#34;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;@i&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;146d94ee&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;object&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;SerilogTest.TestClass&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>What? &lt;code>SerilogTest.TestClass&lt;/code>? By default, Serilog will simply call &lt;code>ToString&lt;/code> on your object. To destructure it, simply add &lt;code>a&lt;/code> before the field in your template&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>jsonLogger.Information(&lt;span style="color:#e6db74">&amp;#34;Useful log for object {@object}&amp;#34;&lt;/span>, obj);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And the output will be&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;@t&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2020-07-12T22:43:28.1525906Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;@m&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Useful log for object TestClass { SomeProperty: \&amp;#34;I am a property at the root level\&amp;#34;, SomeInnerClass: TestInnerClass { SomeOtherProperty: \&amp;#34;I am a property within a child\&amp;#34; } }&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;@i&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;99aea052&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;object&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;SomeProperty&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;I am a property at the root level&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;SomeInnerClass&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;SomeOtherProperty&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;I am a property within a child&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;$type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;TestInnerClass&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;$type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;TestClass&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As you can see, the entire object graph was included within the event. So much contextual information!&lt;/p>
&lt;p>But what if there are properties that you do not want to log? After all, it&amp;rsquo;s typically frowned upon to include information like passwords or personally identifiable information within them.&lt;/p>
&lt;p>Let&amp;rsquo;s reconfigure the logger to only log &lt;code>SomeProperty&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> jsonLogger = Log.Logger = &lt;span style="color:#66d9ef">new&lt;/span> LoggerConfiguration()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .WriteTo.Console(&lt;span style="color:#66d9ef">new&lt;/span> RenderedCompactJsonFormatter())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .Destructure.ByTransforming&amp;lt;TestClass&amp;gt;(c =&amp;gt; &lt;span style="color:#66d9ef">new&lt;/span> { c.SomeProperty })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .CreateLogger();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Will give us&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;@t&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2020-07-12T22:49:44.7386801Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;@m&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Useful log for object { SomeProperty: \&amp;#34;I am a property at the root level\&amp;#34; }&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;@i&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;99aea052&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;object&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;SomeProperty&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;I am a property at the root level&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We only included the property we wanted!&lt;/p>
&lt;p>Note that there are different ways to configure destructuring. A good start in the (awesomely named) &lt;a href="https://github.com/destructurama">Destructurama!&lt;/a> organization.&lt;/p>
&lt;h3 id="type-conflicts">Type conflicts&lt;/h3>
&lt;p>Just a side note about destructing objects regarding conflicting types. Some log aggregating services will use the parameter names within templates to define types.&lt;/p>
&lt;p>An example of this is Elasticsearch.&lt;/p>
&lt;p>With the following statement&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>jsonLogger.Information(&lt;span style="color:#e6db74">&amp;#34;Hello {value}&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;world&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>jsonLogger.Information(&lt;span style="color:#e6db74">&amp;#34;Hello {value}&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">new&lt;/span> { &lt;span style="color:#66d9ef">value&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;world&amp;#34;&lt;/span> });
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Since the first statement will generate a string field called &amp;ldquo;value&amp;rdquo; in the mapping, the second statement will not be logged, as Elasticsearch will complain about trying to fit an object within a string field.&lt;/p>
&lt;h3 id="tldr-1">TLDR&lt;/h3>
&lt;p>&lt;strong>DO&lt;/strong> include object graph when they add contextual information to your statements
&lt;strong>AVOID&lt;/strong> including unnecessary objects. They can clutter your logs, and if you&amp;rsquo;re pushing them to external services that charges by the size of logs you send them, it will quite literally cost you.
&lt;strong>DO&lt;/strong> Be mindful of conflicts that can happen with your parameter names&lt;/p>
&lt;h2 id="exceptions">Exceptions&lt;/h2>
&lt;p>The one thing to remember is that Serilog&amp;rsquo;s methods all have an overload that accepts an &lt;code>Exception&lt;/code> as the first parameter.&lt;/p>
&lt;p>So instead of writing statements including the exception as part of the message template&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> exception = &lt;span style="color:#66d9ef">new&lt;/span> Exception(&lt;span style="color:#e6db74">&amp;#34;Top exception&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">new&lt;/span> Exception(&lt;span style="color:#e6db74">&amp;#34;Inner exception&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>jsonLogger.Information(&lt;span style="color:#e6db74">&amp;#34;Exception! {exception}&amp;#34;&lt;/span>, exception);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Which will include the exception within the &lt;code>exception&lt;/code> parameter&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;@t&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2020-07-12T23:01:14.1165769Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;@m&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Exception! \&amp;#34;System.Exception: Top exception\r\n ---&amp;gt; System.Exception: Inner exception\r\n --- End of inner exception stack trace ---\&amp;#34;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;@i&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;e22b2a9a&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;exception&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;System.Exception: Top exception\r\n ---&amp;gt; System.Exception: Inner exception\r\n --- End of inner exception stack trace ---&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Simply include the exception as the first argument&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> exception = &lt;span style="color:#66d9ef">new&lt;/span> Exception(&lt;span style="color:#e6db74">&amp;#34;Top exception&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">new&lt;/span> Exception(&lt;span style="color:#e6db74">&amp;#34;Inner exception&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>jsonLogger.Information(exception, &lt;span style="color:#e6db74">&amp;#34;Exception&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And now all logged exceptions will be within the &lt;code>@x&lt;/code> field.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;@t&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2020-07-12T23:01:14.1532597Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;@m&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Exception&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;@i&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;7d53da39&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;@x&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;System.Exception: Top exception\r\n ---&amp;gt; System.Exception: Inner exception\r\n --- End of inner exception stack trace ---&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that this behaviour can change depending on your sink. For example, the &lt;a href="https://github.com/serilog/serilog-sinks-elasticsearch">Elasticsearch sink&lt;/a> will include the exceptions within an object array.&lt;/p>
&lt;h3 id="tldr-2">TLDR&lt;/h3>
&lt;p>&lt;strong>DO&lt;/strong> use Serilog&amp;rsquo;s overloads to pass exceptions instead of using the argument list.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>Those were just a few basic things to keep in mind when using Serilog. I stringly suggest visiting the &lt;a href="https://github.com/serilog/serilog/wiki/Writing-Log-Events">Writing log events&lt;/a> page for more information.&lt;/p></description><category>Serilog</category><category>.NET</category></item><item><title>Using Let's Encrypt with Azure CDN</title><link>https://esg.dev/posts/letsencrypt-on-azurecdn/</link><pubDate>Thu, 16 Apr 2020 14:17:03 -0400</pubDate><guid>https://esg.dev/posts/letsencrypt-on-azurecdn/</guid><description>&lt;p>As I was in the process of moving this blog from AWS to Azure, I found myself in an interesting position.&lt;/p>
&lt;p>Azure CDN can provision a certificate for HTTPS on its own, unless you are using the root domain (ex: &lt;code>esg.dev&lt;/code>), in which case you need to provide your own.&lt;/p>
&lt;p>I figured the cheapest way would be to use &lt;a href="https://letsencrypt.org/">Let&amp;rsquo;s Encrypt&lt;/a>, since it&amp;rsquo;s free. And Azure already supports it.&lt;/p>
&lt;p>Or does it? It looks like it can provision a certificate automatically for App Services, but not for Azure CDN.&lt;/p>
&lt;p>Let&amp;rsquo;s Encrypt&amp;rsquo;s &lt;a href="https://certbot.eff.org/">certbot&lt;/a> can automate this on a number of platforms, but not Azure CDN.&lt;/p>
&lt;p>So I had to manually (for now) create a certificate and then configure it on Azure CDN.&lt;/p>
&lt;p>These are the steps I took to make it happen.&lt;/p>
&lt;h2 id="creating-the-certificate-with-certbot">Creating the certificate with certbot&lt;/h2>
&lt;p>First, let&amp;rsquo;s setup &lt;a href="https://certbot.eff.org/">certbot&lt;/a>.&lt;/p>
&lt;p>You will need access to a Linux machine as there is no version of certbot available for Windows yet. In my case, I used Ubuntu on top for WSL, and I based the commands off the &lt;a href="https://certbot.eff.org/lets-encrypt/ubuntubionic-apache.html">Ubuntu documentation page&lt;/a> for certbot.&lt;/p>
&lt;h2 id="install-certbot">Install certbot&lt;/h2>
&lt;p>We&amp;rsquo;ll need to add the certbot PPA:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt-get update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-get install software-properties-common
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo add-apt-repository universe
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo add-apt-repository ppa:certbot/certbot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-get update
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>and then install certbot itself&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt-get install certbot
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="generate-the-certificate">Generate the certificate&lt;/h2>
&lt;p>Now we can use certbot to generate a new certificate in &lt;a href="https://certbot.eff.org/docs/using.html#manual">manual mode&lt;/a>.&lt;/p>
&lt;p>Note: It&amp;rsquo;s possible to run certbot without sudo, see &lt;a href="https://certbot.eff.org/faq/#does-certbot-require-root-administrator-privileges">https://certbot.eff.org/faq/#does-certbot-require-root-administrator-privileges&lt;/a> for more information.&lt;/p>
&lt;p>While Let&amp;rsquo;s Encrypt supports wildcard certificates (ex: &lt;code>*.esg.dev&lt;/code>), I only need &lt;code>www.esg.dev&lt;/code> and &lt;code>esg.dev&lt;/code>, so I&amp;rsquo;ll be specifying those via the &lt;code>-d&lt;/code> (domain) switch.&lt;/p>
&lt;p>We&amp;rsquo;ll also be using the DNS validation method, which involves adding TXT records to your DNS zone, specifically one for each domain within the certificate.&lt;/p>
&lt;p>Now we run the following to launch the certbot wizard.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo certbot certonly --cert-name esg.dev --manual -d esg.dev -d www.esg.dev --preferred-challenges dns
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Follow the instructions given by certbot.&lt;/p>
&lt;p>For each of the domain specified, create the TXT record with the values generated by certbot in your DNS provider of choice. In my case, it was for &lt;code>_acme-challenge.esg.dev&lt;/code> and &lt;code>_acme-challenge.www.esg.dev&lt;/code>.&lt;/p>
&lt;p>Certbot will verify those records. If the validation fails, you might need to re-start the generation process.&lt;/p>
&lt;p>This will have generated pem files for your domain, in my case, under &lt;code>/etc/letsencrypt/live/esg.dev/&lt;/code>.&lt;/p>
&lt;p>We still have one more step to take. Azure CDN didn&amp;rsquo;t like it when I tried to use the pem files, so let&amp;rsquo;s convert those to pfx to make our life a bit easier. We can do this with &lt;a href="https://www.openssl.org/">OpenSSL&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo pkcs12 -export -inkey /etc/letsencrypt/live/esg.dev/privkey.pem -in /etc/letsencrypt/live/esg.dev/fullchain.pem -name esg-dev -out esg.pfx
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will prompt you for a password, enter whatever you feel is appropriate.&lt;/p>
&lt;p>you now can upload the generated pfx file to an Azure key vault, which will allow you to configure Azure CDN with a custom certificate.&lt;/p>
&lt;h2 id="renewing-the-certificate">Renewing the certificate&lt;/h2>
&lt;p>Let&amp;rsquo;s Encrypt certificates have an expiry of 90 days.&lt;/p>
&lt;p>To renew the certificate, it&amp;rsquo;s important to remember that certbot&amp;rsquo;s &lt;code>renew&lt;/code> command is meant for non-interactive usage, and won&amp;rsquo;t work out of the box with the manual plugin.&lt;/p>
&lt;p>But all we need to do is re-run the &lt;em>same exact command&lt;/em> as we did the first time:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo certbot certonly --cert-name esg.dev --manual -d esg.dev -d www.esg.dev --preferred-challenges dns
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And then convert/upload the new certificate to your vault. You&amp;rsquo;ll also need to update your custom domains in Azure CDN to use the newer version of the certificate.&lt;/p>
&lt;h2 id="next-steps">Next steps&lt;/h2>
&lt;p>There are a few solutions out there to do this, but I&amp;rsquo;ve had had no real luck getting them working, and I wanted to understand the process by doing it manually first anyway.&lt;/p>
&lt;p>I&amp;rsquo;ll be looking at automating this in the near future as I&amp;rsquo;ll probably forget to do this every 90 days, so stay tuned!&lt;/p></description><category>Azure</category><category>Let's Encrypt</category></item><item><title>Introduction to Action Constraints in ASP.NET Core</title><link>https://esg.dev/posts/introduction-to-action-constraints/</link><pubDate>Mon, 02 Dec 2019 18:45:08 -0500</pubDate><guid>https://esg.dev/posts/introduction-to-action-constraints/</guid><description>&lt;p>Ever had to integrate a 3rd party webhook into your application, only to realize that they won&amp;rsquo;t let you configure a different address for each type of events?&lt;/p>
&lt;p>A few years ago, I had to do just that for Github webhooks. Thankfully, they provide a HTTP header that describe the type of event being sent.&lt;/p>
&lt;p>At the time, I used a middleware to modify the route, but there are cleaner solutions out there. In this case, I could&amp;rsquo;ve used a feature in ASP.NET Core called &amp;ldquo;Action Constraints&amp;rdquo;, which allow you to impose constraint on otherwise identical routes.&lt;/p>
&lt;p>Note: This is a follow-up on a question I had a few years ago on &lt;a href="https://stackoverflow.com/questions/39302121/header-based-routing-in-asp-net-core">StackOverflow&lt;/a>, and I decided to dig a little deeper.&lt;/p>
&lt;h2 id="action-contraint-attribute">Action Contraint Attribute&lt;/h2>
&lt;p>ASP.NET Core has an interface called &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.actionconstraints.iactionconstraint?f1url=https%3A%2F%2Fmsdn.microsoft.com%2Fquery%2Fdev16.query%3FappId%3DDev16IDEF1%26l%3DEN-US%26k%3Dk(Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraint);k(DevLang-csharp)%26rd%3Dtrue&amp;amp;view=aspnetcore-3.0">&lt;code>IActionConstraint&lt;/code>&lt;/a> that can be implemented by an &lt;code>Attribute&lt;/code> class, which has only 2 members:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Order&lt;/code>, which will determine what order your constraint will be evaluated on (lowest number first)&lt;/li>
&lt;li>&lt;code>Accept(ActionConstraintContext)&lt;/code>, which needs to return a boolean that will tell the framework whether to use this route&lt;/li>
&lt;/ul>
&lt;p>Let&amp;rsquo;s see what an implementation can look like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">HeaderConstraintAttribute&lt;/span> : Attribute, IActionConstraint
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> Order =&amp;gt; &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> Header { &lt;span style="color:#66d9ef">get&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> Value { &lt;span style="color:#66d9ef">get&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> HeaderConstraintAttribute(&lt;span style="color:#66d9ef">string&lt;/span> header, &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#66d9ef">value&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Header = header;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Value = &lt;span style="color:#66d9ef">value&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> Accept(ActionConstraintContext context)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (context.RouteContext.HttpContext.Request.Headers.TryGetValue(Header, &lt;span style="color:#66d9ef">out&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#66d9ef">value&lt;/span>) &amp;amp;&amp;amp; &lt;span style="color:#66d9ef">value&lt;/span>.Any())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">value&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>] == Value;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Simple enough, right? Look for a matching &lt;code>Header&lt;/code> in the &lt;code>HttpContext&lt;/code>, and if present, match it with &lt;code>Value&lt;/code>.&lt;/p>
&lt;p>Now, let&amp;rsquo;s update our controller.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[Route(&amp;#34;api/[controller]&lt;/span>&lt;span style="color:#e6db74">&amp;#34;)]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#a6e22e">[ApiController]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ActionController&lt;/span> : ControllerBase
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> [HttpGet]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> [HeaderConstraint(&amp;#34;MyHeader&amp;#34;, &amp;#34;A&amp;#34;)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> GetStringA()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;A&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> [HttpGet]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> [HeaderConstraint(&amp;#34;MyHeader&amp;#34;, &amp;#34;B&amp;#34;)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> GetStringB()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;B&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There are 2 things to notice here:&lt;/p>
&lt;ul>
&lt;li>Both functions are HTTP Get, to the same route (&lt;code>/api/action&lt;/code> in this case)&lt;/li>
&lt;li>We&amp;rsquo;ve added the &lt;code>HeaderConstraintAttribute&lt;/code> on each route&lt;/li>
&lt;/ul>
&lt;p>Now, try using your HTTP API tool of choice, such as &lt;a href="https://www.getpostman.com/">Postman&lt;/a> or &lt;a href="https://insomnia.rest/">Insomnia&lt;/a>, and do a GET request to &lt;code>/api/action&lt;/code>.&lt;/p>
&lt;p>You should be getting a 404 Not Found error, which makes sense, since both routes are contrained, and neither are matching the contraint.&lt;/p>
&lt;p>Now, try passing a header called &lt;code>MyHeader&lt;/code> with the value &lt;code>A&lt;/code>.&lt;/p>
&lt;p>Surprise! The API returns &lt;code>A&lt;/code>. Change the header value to &lt;code>B&lt;/code>, the API now returns &lt;code>B&lt;/code>.&lt;/p>
&lt;p>This is obviously a very simple scenario, but when dealing with 3rd party APIs that sends different requests to the same address, it&amp;rsquo;s a great way to keep the routes seperated, use strong-typed classes and avoid using things like &lt;code>dynamic&lt;/code> variables.&lt;/p>
&lt;p>You can view the entire code written for this project on &lt;a href="https://github.com/EricStG/ActionConstraintDemo">GitHub&lt;/a>.&lt;/p></description><category>ASP.NET Core</category><category>.NET</category></item><item><title>State management with Terraform</title><link>https://esg.dev/posts/on-terraform/</link><pubDate>Sat, 21 Sep 2019 19:57:59 -0400</pubDate><guid>https://esg.dev/posts/on-terraform/</guid><description>&lt;p>&lt;a href="https://www.terraform.io/">Terraform&lt;/a> is a great tool. While I&amp;rsquo;m not super found of &lt;a href="https://yaml.org/">YAML&lt;/a>, the syntax allows for organizing your infrastructure in a clean way.&lt;/p>
&lt;p>As as they say, cleanliness is Godliness.&lt;/p>
&lt;p>However, there is something that I was was more explicit in the guides and tutorials I was following.&lt;/p>
&lt;h2 id="state-management-in-terraform">State management in Terraform&lt;/h2>
&lt;p>Terraform keeps track of whatever action was applied through it&amp;rsquo;s &lt;a href="https://www.terraform.io/docs/state/index.html">state&lt;/a>. By default, this state is stored on your local drive where your templates are stored.&lt;/p>
&lt;p>This is what happened to me:&lt;/p>
&lt;ol>
&lt;li>Setup the terraform templates&lt;/li>
&lt;li>Plan and apply them&lt;/li>
&lt;li>Do some tweaks, add some stuff&lt;/li>
&lt;li>Plan &amp;amp; apply&lt;/li>
&lt;li>Repeat 3-4 a bunch of times&lt;/li>
&lt;/ol>
&lt;p>Now I&amp;rsquo;m happy with the template, everything is good. Let&amp;rsquo;s throw that in an Azure DevOps pipeline.&lt;/p>
&lt;p>This, my friends, is where things went horribly terrible wrong.&lt;/p>
&lt;p>Since the state was on my local drive, Terraform tried recreating my resources every time the template was applied. And it was applied successfully somehow, too! The result was that now I had a bunch of copies of the same resource. Route 53 zones with the same names, S3 buckets too. It wasn&amp;rsquo;t great.&lt;/p>
&lt;p>Lesson learned! Setup a &lt;a href="https://www.terraform.io/docs/backends/index.html">backend&lt;/a>.&lt;/p>
&lt;p>Terraform allows to store the state in share space, such as S3 buckets. Note that there&amp;rsquo;s a new-ish offering &lt;a href="https://www.terraform.io/docs/cloud/index.html">Terraform Cloud&lt;/a> which will allow you to not only store the state, but manage your configuration and provisioning, but that&amp;rsquo;s a story for another time&amp;hellip;&lt;/p>
&lt;p>I decided to use S3 to host the state since I was planning to host the site on AWS anyway. All I had to do was create a new S3 bucket in my AWS account and modify my Terraform configuration to include a &lt;code>backend&lt;/code> section.&lt;/p>
&lt;p>Here&amp;rsquo;s how it looks:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-HCL" data-lang="HCL">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">terraform&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">backend&lt;/span> &lt;span style="color:#e6db74">&amp;#34;s3&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bucket &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;blog-terraform-state&amp;#34;&lt;/span>&lt;span style="color:#75715e"> # The name of the bucket to use
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> key &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;terraform.tfstate&amp;#34;&lt;/span>&lt;span style="color:#75715e"> # The name of the file within the bucket
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> region &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;us-east-1&amp;#34;&lt;/span>&lt;span style="color:#75715e"> # The AWS region to store the bucket in
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once I had the backend properly configured, it didn&amp;rsquo;t matter if I applied the configuration locally or if I did through a remote pipeline. They all shared the same state, and this lived in harmony forever and ever.&lt;/p></description><category>Terraform</category></item></channel></rss>